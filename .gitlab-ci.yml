variables:
  CI_REGISTRY: https://index.docker.io/v1/
  PROBE_CI_REGISTRY_NAME: $CI_REGISTRY_USER/probe
  COLLECTOR_CI_REGISTRY_NAME: $CI_REGISTRY_USER/collector
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - venv/

stages:
  - static_analysis
  - test
  - build
  - docker_build

flake8:
  stage: static_analysis
  image: "python:latest"
  before_script:
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
  script:
    - pip install flake8
    - flake8 --max-line-length=150 *.py
    - flake8 --max-line-length=150 modules/mind2/*.py
    - flake8 --max-line-length=150 modules/mqtt/*.py
    - flake8 --max-line-length=150 modules/mqtt_collector/*.py
    - flake8 --max-line-length=150 modules/mqtt_probe/*.py
  tags:
    - docker

pylint:
  stage: static_analysis
  image: "python:latest"
  allow_failure: true
  before_script:
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
  script:
    - pip install pylint
    - pylint -d C0301 *.py
    - pylint -d C0301 modules/mind2/*.py
    - pylint -d C0301 modules/mqtt/*.py
    - pylint -d C0301 modules/mqtt_collector/*.py
    - pylint -d C0301 modules/mqtt_probe/*.py
  tags:
    - docker

bandit:
  stage: static_analysis
  image: "python:latest"
  allow_failure: true
  before_script:
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
  script:
    - pip install bandit
    - bandit -r *.py
    - bandit -r modules/mind2/*.py
    - bandit -r modules/mqtt/*.py
    - bandit -r modules/mqtt_collector/*.py
    - bandit -r modules/mqtt_probe/*.py
  tags:
    - docker

pytest:
  stage: test
  image: "python:latest"
  before_script:
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
  script:
    - pip install pytest
    - pytest
  tags:
    - docker

build:
  stage: build
  image: "python:latest"
  before_script:
    - python --version
  script:
    - mkdir -p probe
    - mkdir -p collector
    - cp requirements.txt probe/
    - cp requirements.txt collector/
    - cp -r modules/mqtt/ probe/
    - cp -r modules/mqtt/ collector/
    - cp -r modules/mqtt_probe/ probe/
    - cp -r modules/mqtt_collector/ collector/
    - cp -r modules/netflow_tmp/ probe/
    - cp -r modules/netflow_tmp/ collector/
    - cp probe.py probe/
    - cp collector.py collector/
  artifacts:
    paths:
      - probe/
      - collector/
    when: on_success
    expire_in: 1 hour
  tags:
    - docker


probe_docker_build:
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_TAG == null
  stage: docker_build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/docker/probe/Dockerfile"
      --destination "${PROBE_CI_REGISTRY_NAME}:dev-${CI_COMMIT_REF_NAME}"
  dependencies: 
    - build
  needs: ["build"]
  tags:
    - docker

collector_docker_build:
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_TAG == null
  stage: docker_build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/docker/collector/Dockerfile"
      --destination "${COLLECTOR_CI_REGISTRY_NAME}:dev-${CI_COMMIT_REF_NAME}"
  dependencies: 
    - build
  needs: ["build"]
  tags:
    - docker
